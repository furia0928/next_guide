---
description: css style rule
globs: 
alwaysApply: false
---
# CSS 스타일링 가이드라인

당신은 프론트엔드 개발에 능숙한 AI 어시스턴트입니다. 다음 스타일링 규칙을 철저히 따라주세요:

## 단위 사용 규칙

1. **rem 단위 사용**:
   - 모든 크기 단위(font-size, margin, padding, width, height 등)는 기본적으로 rem 단위를 사용합니다.
   - 픽셀 값은 rem으로 변환하여 사용합니다 (기준: 10px = 1rem).
   - 예외적으로 border와 같은 미세한 요소는 px 단위 사용 가능합니다.

2. **반응형 디자인**:
   - media query 사용 시 px 대신 rem 단위로 breakpoint를 지정합니다.
   - vh, vw 단위는 전체 화면 요소에만 사용합니다.

## 코드 구조 규칙

1. **CSS 분리 원칙**:
   - 모든 컴포넌트의 스타일은 별도의 파일로 분리합니다.
   - 명명 규칙: `[ComponentName].styles.js`
   - 스타일 파일은 해당 컴포넌트 파일과 동일한 디렉토리에 위치시킵니다.

2. **스타일 컴포넌트 명명**:
   - Styled 컴포넌트는 `Styled` 접두사를 사용합니다 (예: `StyledButton`, `StyledHeader`).
   - 하위 요소는 중첩 선택자로 정의합니다 (예: `.header`, `.button`).

3. **테마 활용**:
   - 하드코딩된 색상 값 대신 theme.js에서 정의된 색상을 사용합니다.
   - 모든 공통 값(색상, 폰트 크기, 간격 등)은 theme 객체를 통해 참조합니다.
   - 새로운 색상이나 스타일 값은 먼저 theme에 추가한 후 사용합니다.

## 모범 사례

1. **중첩 최소화**:
   - CSS 선택자 중첩은 3단계를 넘지 않도록 합니다.
   - 과도한 중첩 대신 명명된 클래스를 사용합니다.

2. **재사용성**:
   - 반복되는 스타일 패턴은 공통 스타일 파일로 추출합니다.
   - 유틸리티 함수를 활용하여 스타일 일관성을 유지합니다.

3. **성능 최적화**:
   - 애니메이션은 transform과 opacity 속성을 우선적으로 사용합니다.
   - 복잡한 선택자 대신 직접 클래스 선택을 선호합니다.

## 접근성

1. **포커스 스타일**:
   - 모든 대화형 요소에 명확한 포커스 스타일을 제공합니다.
   - outline: none은 대체 포커스 스타일이 있을 때만 사용합니다.

2. **색상 대비**:
   - 텍스트와 배경 간의 충분한 대비를 보장합니다.
   - 색상만으로 정보를 전달하지 않습니다.


## 스타일링 예시

### 지양할 방식 (여러 컴포넌트)
```javascript
export const StyledRadio = styled.div`...`;
export const RadioInput = styled.input`...`;
export const RadioCircle = styled.div`...`;
export const RadioLabel = styled.label`...`;

// 사용: <StyledRadio><RadioInput/><RadioCircle/><RadioLabel/></StyledRadio>
```

### 권장 방식 (단일 컴포넌트 + 클래스)
```javascript
export const StyledRadio = styled.div`
  /* 컨테이너 스타일 */
  
  .radio-input { /* 입력 스타일 */ }
  .radio-circle { /* 원형 스타일 */ }
  .radio-label { /* 레이블 스타일 */ }
`;

// 사용: <StyledRadio><input className="radio-input"/><div className="radio-circle"/></StyledRadio>
``` 

